from flask import Blueprint, request, session, jsonify
from data.data_access import data_access

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/login', methods=['POST'])
def login():
  """Login endpoint for user authentication."""
  data = request.get_json()
  email = data.get('email')
  password = data.get('password')

  if not email or not password:
    return jsonify({"error": "Email and password required"}), 400

  try:
    # Get user by email using the data access layer
    user = data_access.get_user_by_email(email)
    
    if not user or not user.validate_password(password):
      return jsonify({"error": "Invalid email or password"}), 401

    # Create session
    session['user_id'] = user.user_id
    session['email'] = user.email
    session['name'] = user.name
    session['surname'] = user.surname
    session['logged_in'] = True

    # Return user data without password
    return jsonify({
      "message": "Login successful",
      **user.to_safe_dict()
    })

  except Exception as e:
    return jsonify({"error": "Failed to authenticate user"}), 500

@auth_bp.route('/logout', methods=['POST'])
def logout():
  """Logout endpoint to clear user session."""
  from socketio_handlers import connected_users
  
  user_id = session.get('user_id')
  if user_id and user_id in connected_users:
    del connected_users[user_id]

  session.clear()
  return jsonify({"message": "Logout successful"})

@auth_bp.route('/session', methods=['GET'])
def get_session():
  """Get current session information."""
  if session.get('logged_in'):
    return jsonify({
      "logged_in": True,
      "user_id": session.get('user_id'),
      "username": session.get('username'),
      "name": session.get('name'),
      "surname": session.get('surname'),
      "email": session.get('email')
    })
  else:
    return jsonify({"logged_in": False}), 401

@auth_bp.route('/register', methods=['POST'])
def register():
  """Register a new user."""
  data = request.get_json()
  
  # Validate required fields
  required_fields = ['name', 'surname', 'email', 'password']
  for field in required_fields:
    if not data.get(field):
      return jsonify({"error": f"{field.capitalize()} is required"}), 400
  
  try:
    # Check if user already exists
    existing_user = data_access.get_user_by_email(data['email'])
    if existing_user:
      return jsonify({"error": "User with this email already exists"}), 400
    
    # Create new user
    from models.user import User
    new_user = User(
      user_id="",  # Will be generated by data_access.create_user
      name=data['name'],
      surname=data['surname'],
      email=data['email'],
      password=data['password']
    )
    
    if data_access.create_user(new_user):
      return jsonify({
        "message": "User registered successfully",
        **new_user.to_safe_dict()
      }), 201
    else:
      return jsonify({"error": "Failed to register user"}), 500
          
  except Exception as e:
    return jsonify({"error": "Failed to register user"}), 500